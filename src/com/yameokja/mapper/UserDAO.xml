<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yameokja.mc.IUserDAO">
	<!-- 사용자 로그인 확인 -->
	<select id="userLoginCheck" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM USING_USER
		WHERE CRYPTPACK.DECRYPT(USER_PW, #{user_pw}) = #{user_pw}
		<!-- WHERE USER_PW = #{user_pw} -->
		     AND USER_ID = #{user_id}
	</select>
	
	<!-- 사용자 id 불러오기 -->
	<select id="userPwCheck" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM USING_USER
		WHERE CRYPTPACK.DECRYPT(USER_PW, #{user_pw}) = #{user_pw}
		<!-- WHERE USER_PW = #{user_pw} -->
		     AND USER_NUM = #{user_num}
	</select>
	
	<!-- 아이디 중복 확인 -->
	<select id="idCheck" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM
		(SELECT USER_ID AS ID
		FROM USING_USER
		UNION
		SELECT ADMIN_ID AS ID
		FROM ADMIN) T
		WHERE ID = #{user_id}
	</select>
	
	<!-- 닉네임 중복 확인 -->
	<select id="nickCheck" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM USING_USER
		WHERE USER_NICKNAME = #{user_nick}
	</select>
	
	<!-- 사용자 정보 입력 -->
	<insert id="joinSend">
		INSERT INTO USING_USER(USER_NUM, USER_ID, USER_PW, USER_NAME, USER_SSN1, USER_SSN2
							 , USER_TEL, USER_NICKNAME, REG_DATE ,USER_EMAIL)
		VALUES(#{user_num}, #{user_id}, CRYPTPACK.ENCRYPT(#{user_pw},#{user_pw})
			, #{user_name}, #{user_ssn1}, CRYPTPACK.ENCRYPT(#{user_ssn2},#{user_ssn2}), #{user_tel}
			, #{user_nickname}, TO_DATE(SYSDATE, 'YYYY-MM-DD'), #{user_email, jdbcType=VARCHAR})
	</insert>
	
	<!-- 사용자 번호(난수) 중복 확인 -->
	<select id="userNumCheck" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM USER_LIST
		WHERE USER_NUM = #{user_num}
	</select>
	
	<select id="storeCheck" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM STORE_VIEW
		WHERE USER_NUM = #{user_num}
	</select>
	
	<!-- 사용자 기본정보 찾기 -->
	<select id="searchUserInfo" resultType="com.yameokja.mc.UserDTO">
		SELECT USER_NICKNAME, USER_NUM, USER_ID
		FROM USER_VIEW
		<if test='check eq "id"'>
		WHERE USER_ID = #{user_info}
		</if>
		<if test='check eq "num"'>
		WHERE USER_NUM = #{user_info}
		</if>
		
	</select>
	
	<!-- 상반기 등급&포인트 -->
	<select id="firstHalf" resultType="com.yameokja.mc.UserDTO">
		SELECT USER_GRADE, POINT_SUM
		FROM FIRST_HALF
		WHERE USER_NUM = #{user_num}
	</select>
	<!-- 하반기 등급&포인트 -->
	<select id="secondHalf" resultType="com.yameokja.mc.UserDTO">
		SELECT USER_GRADE, POINT_SUM
		FROM SECOND_HALF
		WHERE USER_NUM = #{user_num}
	</select>
	
	<!-- 입맛 키워드 범례 -->
	<select id="tasteKeyword" resultType="com.yameokja.mc.TasteLabelDTO">
		SELECT TASTE_NUM, TASTE_KEYWORD
		FROM TASTE_LABEL
	</select>
	
	<!-- 유저 입맛 키워드 찾기 -->
	<select id="searchTasteKeyword" resultType="com.yameokja.mc.TasteLabelDTO">
		SELECT TL.TASTE_NUM AS TASTE_NUM, TL.TASTE_KEYWORD AS TASTE_KEYWORD
		FROM USER_TASTE UT JOIN TASTE_LABEL TL
		ON UT.TASTE_NUM = TL.TASTE_NUM
		WHERE UT.USER_NUM = #{user_num}
	</select>
	
	<!-- 사용자 마이페이지 비교했던 가게 목록 -->
	<select id="searchComparedList" resultType="com.yameokja.mc.StoreDTO">
		SELECT T.PHOTO_LINK AS PHOTO_LINK, T.ST_NUM AS ST_NUM, T.ST_NAME AS ST_NAME
		     , T.REG_DATE AS REG_DATE, T.ISOUT AS ISOUT
		FROM
		(
		SELECT SP.PHOTO_LINK AS PHOTO_LINK, SL.ST_NUM AS ST_NUM, IA.ST_NAME AS ST_NAME
		        , CB.REG_DATE AS REG_DATE, ROWNUM AS RN
				, CASE WHEN OP.OUT_PROCESS_NUM IN (SELECT OUT_PROCESS_NUM FROM OUT_REJ) THEN '운영'
				               WHEN OP.OUT_PROCESS_NUM IS NOT NULL THEN '폐업'
				               ELSE '운영' END AS ISOUT		FROM COMPARED_BOX CB LEFT JOIN ST_LIST SL
		ON CB.ST_NUM = SL.ST_NUM
		LEFT JOIN ST_PHOTO SP
		ON SL.ST_NUM = SP.ST_NUM
		RIGHT JOIN MAIN_PHOTO MP
		ON MP.ST_PHOTO_NUM = SP.ST_PHOTO_NUM
		LEFT JOIN IN_PROCESS IP
		ON SL.IN_PROCESS_NUM = IP.IN_PROCESS_NUM
		LEFT JOIN IN_APPLY IA
		ON IP.IN_APPLY_NUM = IA.IN_APPLY_NUM
		LEFT JOIN OUT_APPLY OA
		ON IP.IN_PROCESS_NUM = OA.IN_PROCESS_NUM
		LEFT JOIN OUT_PROCESS OP
		ON OA.OUT_APPLY_NUM = OP.OUT_APPLY_NUM
		WHERE CB.USER_NUM = #{user_num}
		ORDER BY REG_DATE DESC
		) T
		<![CDATA[WHERE T.RN <= 30]]>
	</select>
	
	<!-- 사용자 마이페이지 작성한 리뷰목록 -->
	<select id="searchRvList" resultType="com.yameokja.mc.ReviewDTO">
		SELECT RB.RV_NUM AS RV_NUM, IA.ST_NAME AS ST_NAME, RB.RV_CONTENT AS RV_CONTENT, RB.REG_DATE AS REG_DATE
		FROM RV_BOX RB LEFT JOIN ST_LIST SL
		ON RB.ST_NUM = SL.ST_NUM
		LEFT JOIN IN_PROCESS IP
		ON SL.IN_PROCESS_NUM = IP.IN_PROCESS_NUM
		LEFT JOIN IN_APPLY IA
		ON IP.IN_APPLY_NUM = IA.IN_APPLY_NUM
		WHERE RB.USER_NUM = #{user_num}
		ORDER BY REG_DATE DESC
	</select>
	
	<!-- 사용자 마이페이지 찜 목록 -->
	<select id="searchLikeList" resultType="com.yameokja.mc.StoreDTO">
		SELECT T.PHOTO_LINK AS PHOTO_LINK, T.ST_NAME AS ST_NAME, T.REG_DATE AS REG_DATE, T.ISOUT AS ISOUT
		FROM
		(
		    SELECT SP.PHOTO_LINK AS PHOTO_LINK, IA.ST_NAME AS ST_NAME
		            , LB.REG_DATE AS REG_DATE, ROWNUM AS RN
		            , CASE WHEN OP.OUT_PROCESS_NUM IN (SELECT OUT_PROCESS_NUM FROM OUT_REJ) THEN '운영'
		               WHEN OP.OUT_PROCESS_NUM IS NOT NULL THEN '폐업'
		               ELSE '운영' END AS ISOUT
		    FROM LIKE_BOX LB LEFT JOIN ST_LIST SL
		    ON LB.ST_NUM = SL.ST_NUM
		    LEFT JOIN ST_PHOTO SP
		    ON SL.ST_NUM = SP.ST_NUM
		    RIGHT JOIN MAIN_PHOTO MP
		    ON mp.st_photo_num = sp.st_photo_num
		    LEFT JOIN IN_PROCESS IP
		    ON SL.IN_PROCESS_NUM = IP.IN_PROCESS_NUM
		    LEFT JOIN IN_APPLY IA
		    ON IP.IN_APPLY_NUM = IA.IN_APPLY_NUM
		    LEFT JOIN OUT_APPLY OA
		    ON IP.IN_PROCESS_NUM = OA.IN_PROCESS_NUM
		    LEFT JOIN OUT_PROCESS OP
		    ON OA.OUT_APPLY_NUM = OP.OUT_APPLY_NUM
		    WHERE LB.USER_NUM = #{user_num}
			ORDER BY REG_DATE DESC
		) T
		<![CDATA[WHERE T.RN <= 30]]>
	</select>
	
	<select id="userAlarm" resultType="com.yameokja.mc.AlarmDTO">
		SELECT USER_NUM, CHECK_DATE, COMMENTARY
		FROM USER_ALARM
		WHERE USER_NUM = #{user_num}
		ORDER BY CHECK_DATE	
	</select>
	
	<select id="userModify" resultType="com.yameokja.mc.UserDTO">
		SELECT USER_NUM, USER_NAME, USER_SSN1, USER_SSN2, USER_ID, USER_TEL, USER_EMAIL, USER_NICKNAME
		FROM USING_USER
		WHERE USER_NUM = #{user_num}
	</select>
	
	<!-- (ajax)닉네임중복검사 -->
	<select id="nickName" resultType="java.lang.Integer">
		SELECT COUNT(*) AS COUNT
		FROM USING_USER
		WHERE USER_NICKNAME = #{nickName}
	</select>
	
	<!-- 개인정보수정에서 회원정보수정
	<update id="userInfoModify">
		UPDATE USING_USER
		SET USER_PW = #{user_pw},
		    USER_NICKNAME=#{user_nickname},
		    USER_EMAIL=#{user_email}
		WHERE USER_NUM = #{user_num}
	</update> -->
	
  	<!-- 개인정보수정에서 입맛키워드삭제 -->
  	<update id="userIbmatDelete">
  		DELETE
		FROM USER_TASTE
		WHERE USER_NUM = #{user_num}
  	</update>
	
	<!-- 개인정보수정에서 입맛키워드입력 -->
	<insert id="userIbmatInsert">
		INSERT INTO USER_TASTE(USER_TASTE_NUM, USER_NUM, TASTE_NUM)
		VALUES(TASTESEQ.NEXTVAL, #{user_num}, #{taste_num})
	</insert>
	
	<!-- 개인정보수정에서 비밀번호 update -->
	<update id="userPwUpdate">
		UPDATE USING_USER
		SET USER_PW = CRYPTPACK.ENCRYPT(#{user_pw},#{user_pw})
		WHERE USER_NUM = #{user_num}
	</update>
	
	<!-- 개인정보수정에서 닉네임 update -->
	<update id="userNicknameUpdate">
		UPDATE USING_USER
		SET USER_NICKNAME = #{user_nickname}
		WHERE USER_NUM = #{user_num}
	</update>
	
	<!-- 개인정보수정에서 이메일 update -->
	<update id="userEmailUpdate">
		UPDATE USING_USER
		SET USER_EMAIL = #{user_email}
		WHERE USER_NUM = #{user_num}
	</update> 
</mapper>





                           


